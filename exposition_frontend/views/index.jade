extends layout

block jumbotron
	div.pt-perspective#pt-main
		div.jumbotron.index-jumbotron.pt-page.pt-page-1
			div.container.text-center
				div.row
					div.col-lg-10.col-lg-offset-1.text-center(style='margin-top:-40px')
						h3(style="font-size:170px;font-weight:normal;").a.
							Stimm ab!
						h3(style="font-size:70px;font-weight:normal;line-height:90px;text-align:justify;margin-top:30px;").b.
							Bet&auml;tige den linken Schalter, falls du die Ausstellung 
							eher als Kunst empfindest.

						h3(style="font-size:70px;font-weight:normal;line-height:90px;text-align:justify;margin-top:30px;").b.
							Bet&auml;tige den rechten Schalter, falls die Ausstellung f&uuml;r
							dich eher Kitsch darstellt.

						h3(style="display:none;font-size:70px;font-weight:normal;line-height:90px;text-align:justify;margin-top:30px;").b.
							Bet&auml;tige den linken Schalter, falls du die Ausstellung 
							eher als Kunst empfindest und den rechten falls sie f&uuml;r
							dich eher Kitsch darstellt.



		//div.jumbotron.index-jumbotron#voted(style="display:none;")
		div.jumbotron.index-jumbotron.pt-page.pt-page-2
			div.container.text-center
				div.row
					div.col-lg-12#gaugeContainer.
						<canvas width="500" height="400" style="margin-top:165px" id="gauge" />

				div.row(style="margin-top:-140px;font-size:60px;line-height:60px;")
					div.col-lg-4(style="margin-right:-90px;margin-left:40px;")
						div(style="float:right;").
							<img src="/img/icon_20254/icon_20254.png" width="100" />
							<br />
							<strong>Kunst: <span id="counterKunst"></span></strong> 


					div.col-lg-4
						div(style="float:left").
							<div style="font-size:70px;color:white;margin-top:23px;display:none;" id="incrementKunst">
								<strong>+1</strong>
							</div>

					div.col-lg-4
						div(style="float:left").
							<img src="/img/icon_25214/icon_25214.png" width="100" />
							<br />
							<strong>Kitsch: <span id="counterKitsch"></span></strong> 
						div(style="float:left").
							<div style="font-size:70px;color:white;margin-top:20px;display:none;" id="incrementKitsch">
								<strong>+1</strong>
							</div>


	script(type="text/javascript").
		var voting = false;
		function vote(whatfor) {
			if (voting) return;
			voting = true;
			//$('.pt-page-1 h3').jumble([255,220,100],[255,255,255],false,true,200);
			//$('h3').jumble([120,190,240],true,true,false,100); 
			/*
			$('h3.a').funnyText({
				speed: 50,
				borderColor: '#ff00ff',
				activeColor: '#ff0000',
				color: '#ffffff',
				fontSize: '160px'
			});
			$('h3.b').funnyText({
				speed: 50,
				borderColor: '#ffff00',
				activeColor: '#ffff00',
				color: '#0000ff',
				fontSize: '80px'
			});
			*/


			//$("body").animate( { backgroundColor: "#000000" }, 1000);
			//$("body").animate( { backgroundColor: "#ffff00" }, 1000);

			//$("#gauge").remove();
			//document.getElementById("gaugeContainer").innerHTML = 
				//'<canvas width="500" height="400" style="margin-top:-35px" id="gauge" />'; 

			//return;
			setTimeout(function() {
			$.get("/vote/" + whatfor, function (data) {
				createGauge();
				gauge.maxValue = data.counter.total; // set max gauge value
				gauge.animationSpeed = 32; // set animation speed (32 is default value)

				$("#counterKunst").text(data.counter.kunst);
				$("#counterKitsch").text(data.counter.kitsch);

				var val = data.counter.total - data.counter.kunst;
				$(".bang").animate( { opacity: "1.0" }, 1000);

				//$("#index").fadeOut(1000, function() {
				var transitions = [36, 32, 35, 37];;

				pageTransition.nextPage(transitions[transitionnr], function() {
					transitionnr = (transitionnr + 1) % transitions.length;
					if (data.whatfor === "kitsch") {
						$("#incrementKitsch").css({"display": "block"});
						$("#incrementKitsch").fadeIn(1000);
					} else {
						$("#incrementKunst").fadeIn(1000);
						$("#incrementKunst").css({"display": "block"});
					}


					//console.log("about to delay");
					setTimeout("gauge.set(" + val + ")", 800);

					//$("#voted").fadeIn(1000, function() {
					//pageTransition.nextPage(32, function() {
					setTimeout("fadeIncOut('" + data.whatfor + "')", 1000);
					//});
				});
			});
			}, 700);
		}
		var transitionnr = 0;

		fadeIncOut = function(whatfor) {
			if (whatfor === "kitsch") {
				$("#incrementKitsch").fadeOut(3000);
			} else {
				$("#incrementKunst").fadeOut(3000);
			}

			setTimeout(function() {
				setTimeout("pageTransition.nextPage(30, function() {voting=false;})", 500);
				//$("body").animate( { backgroundColor: "black" }, 1500);
				$(".bang").animate( { opacity: "0.0" }, 1500);
			}, 4000);
		}

		var gauge;
		var pageTransition;
		var connected = false;
		var timeout;

		$(function() {
			createGauge();
			pageTransition = PageTransitions();
			pageTransition.init();
			//$('.pt-page-1 h3').jumble([255,255,255],[255,255,255],false,false);

			var socket = io.connect('http://localhost:8002');
			socket.on('connect', function () {
				connected = true;
				clearTimeout(timeout);
			});
			socket.on('disconnect', function () {
				connected = false;
				retryConnectOnFailure();
			});
			var retryConnectOnFailure = function() {
				console.log("about to retry in 5000");
				setTimeout(function() {
					console.log("connected? " + connected);
					if (!connected) {
						window.location.href = 'http://localhost:8001/';
					}
					//retryConnectOnFailure();
				}, 5000);
			}
			socket.on('vote', function (data) {
				//console.log(data);
				if (pageTransition.isAnimating()) return;

				if (data.whatfor == "kunst")
					vote('kunst');
				else if (data.whatfor == "kitsch")
					vote('kitsch');
				//socket.emit('my other event', { my: 'data' });
			});
		});

		function createGauge() {
				var opts = {
					lines: 12, // The number of lines to draw
					angle: 0.15, // The length of each line
					lineWidth: 0.44, // The line thickness
					pointer: {
						length: 0.9, // The radius of the inner circle
						strokeWidth: 0.035, // The rotation offset
						color: '#ffffff' // Fill color
					},
					limitMax: 'false',   // If true, the pointer will not go past the end of the gauge
					colorStart: '#7cf6ff',   // Colors
					colorStop: '#7cf6ff',    // just experiment with them
					strokeColor: '#ffff00',
					//strokeColor: '#d22e81',
					generateGradient: true
				};


				var target = document.getElementById('gauge'); // your canvas element
				gauge = new Gauge(target).setOptions(opts); 
		}

