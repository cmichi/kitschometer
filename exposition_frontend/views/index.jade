extends layout

block jumbotron
	div.hidden
		audio(autoplay="autoplay",src="/sounds/kitsch.m4a")#sound_kitsch
		audio(src="/sounds/kunst.m4a")#sound_kunst

	div.pt-perspective#pt-main
		div.jumbotron.index-jumbotron.pt-page.pt-page-1
			div.container.text-center
				div.row
					div.col-lg-10.col-lg-offset-1.text-center
						h3(style="font-size:160px;font-weight:normal;").
							Stimm ab!
						h3(style="font-size:80px;font-weight:normal;").
							Was ist dein Ausstellungs-Eindruck?


		//div.jumbotron.index-jumbotron#voted(style="display:none;")
		div.jumbotron.index-jumbotron.pt-page.pt-page-2
			div.container.text-center
				div.row
					div.col-lg-12(style="display:none")
						strong(style="font-size:32").
							Soso&hellip; 

						- if (whatfor === "kitsch")
							strong(style="font-size:32;color:#d22e81;").
								Kitsch
						- else 
							strong(style="font-size:32;color:black;").
								Kunst
						- endif

					div.col-lg-12#gaugeContainer.
						'<canvas width="500" height="400" style="margin-top:-35px" id="gauge" />'

				div.row(style="margin-top:-70px")
					div.col-lg-4
						div(style="float:right").
							<img src="/img/icon_20254/icon_20254.png" width="100" />
							<br />
							<strong>Kunst: <span id="counterKunst"></span></strong> 


					div.col-lg-4
						div(style="float:left").
							<div style="font-size:70px;color:white;margin-top:-10px;display:none;" id="incrementKunst">
								<strong>+1</strong>
							</div>

					div.col-lg-4
						div(style="float:left").
							<img src="/img/icon_25214/icon_25214.png" width="100" />
							<br />
							<strong>Kitsch: <span id="counterKitsch"></span></strong> 
						div(style="float:left").
							<div style="font-size:70px;color:white;margin-top:-10px;display:none;" id="incrementKitsch">
								<strong>+1</strong>
							</div>


	script(type="text/javascript").
		var voting = false;
		function vote(whatfor) {
			if (voting) return;
			voting = true;
			//$("#gauge").remove();
			//document.getElementById("gaugeContainer").innerHTML = 
				//'<canvas width="500" height="400" style="margin-top:-35px" id="gauge" />'; 

			$.get("/vote/" + whatfor, function (data) {
				createGauge();
				gauge.maxValue = data.counter.total; // set max gauge value
				gauge.animationSpeed = 32; // set animation speed (32 is default value)

				$("#counterKunst").text(data.counter.kunst);
				$("#counterKitsch").text(data.counter.kitsch);

				var val = data.counter.total - data.counter.kunst;

				//$("#index").fadeOut(1000, function() {
				pageTransition.nextPage(32, function() {
					if (data.whatfor === "kitsch") {
						$("#incrementKitsch").css({"display": "block"});
						$("#incrementKitsch").fadeIn(1000);

						var audio = $("#sound_kitsch");
						audio.play();
					} else {
						$("#incrementKunst").fadeIn(1000);
						$("#incrementKunst").css({"display": "block"});

						var audio = $("#sound_kunst");
						audio.play();
					}


					//console.log("about to delay");
					setTimeout("gauge.set(" + val + ")", 800);

					//$("#voted").fadeIn(1000, function() {
					//pageTransition.nextPage(32, function() {
					setTimeout("fadeIncOut('" + data.whatfor + "')", 1000);
					//});
				});
			});
		}

		fadeIncOut = function(whatfor) {
			if (whatfor === "kitsch") {
				$("#incrementKitsch").fadeOut(3000);
			} else {
				$("#incrementKunst").fadeOut(3000);
			}

			setTimeout("pageTransition.nextPage(30, function() {voting=false;})", 3000);

			//$("#voted").delay(3000).pageTransition.nextPage(2);
			/*
			$("#voted").delay(3000).fadeOut(2000, function() {
				$("#index").fadeIn(2000);

				//gauge.animationSpeed = 128;
				//gauge.set(0);
			});
			*/
		}

		var gauge;
		var pageTransition;
		var connected = false;
		var timeout;

		$(function() {
			createGauge();
			pageTransition = PageTransitions();
			pageTransition.init();

			var socket = io.connect('http://localhost:8002');
			socket.on('connect', function () {
				connected = true;
				clearTimeout(timeout);
			});
			socket.on('disconnect', function () {
				connected = false;
				retryConnectOnFailure();
			});
			var retryConnectOnFailure = function() {
				setTimeout(function() {
					if (!connected) {
						window.location.href = 'http://localhost:8001/';
					}
					//retryConnectOnFailure();
				}, 1000);
			}
			socket.on('vote', function (data) {
				//console.log(data);
				if (pageTransition.isAnimating()) return;

				if (data.whatfor == "kunst")
					vote('kunst');
				else if (data.whatfor == "kitsch")
					vote('kitsch');
				//socket.emit('my other event', { my: 'data' });
			});
		});

		function createGauge() {
				var opts = {
					lines: 12, // The number of lines to draw
					angle: 0.15, // The length of each line
					lineWidth: 0.44, // The line thickness
					pointer: {
						length: 0.9, // The radius of the inner circle
						strokeWidth: 0.035, // The rotation offset
						color: '#ffffff' // Fill color
					},
					limitMax: 'false',   // If true, the pointer will not go past the end of the gauge
					colorStart: '#000000',   // Colors
					colorStop: '#000000',    // just experiment with them
					strokeColor: '#d22e81',
					//strokeColor: '#d22e81',
					generateGradient: true
				};


				var target = document.getElementById('gauge'); // your canvas element
				gauge = new Gauge(target).setOptions(opts); 
		}

